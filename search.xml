<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Mac下使用Jabref+Mendeley+OfficeWord进行文献引用（重新发布）</title>
    <url>/2020/07/14/Mac%E4%B8%8B%E4%BD%BF%E7%94%A8Jabref-Mendeley-OfficeWord%E8%BF%9B%E8%A1%8C%E6%96%87%E7%8C%AE%E5%BC%95%E7%94%A8%EF%BC%88%E9%87%8D%E6%96%B0%E5%8F%91%E5%B8%83%EF%BC%89/</url>
    <content><![CDATA[<h2 id="总述"><a href="#总述" class="headerlink" title="总述"></a>总述</h2><p>很多人会在Mac下使用Office Word进行写作，有时会有文献引用的需求（比如毕业论文）。通过Office Word自带的工具进行引用费时费力，一旦插入文献可能需要大量修改。今天为大家介绍一种在Mac下使用Jabref+Mendeley+Office Word进行便捷的文献引用的方式。</p>
<p>!!!注意：常见搜索引擎会推荐BibTex4word这个插件，很不幸，这个插件不支持Mac环境 (官网明确写了it does not work on Mac)，所以不用再试了</p>
<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>环境：macOS Mojave, Microsoft Word for Mac 16.35<br>工具：Jabref(去这里下载Mac dmg), Mendeley Desktop(链接)</p>
<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>在Jabref里创建新的文献记录(可以直接使用BibTex source)，保存选择生成.bib文件</p>
<h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>在Mendeley Desktop里创建一个账号，选择导入刚刚的.bib文件(建议新建一个文件夹导入，不然可能会弄乱列表)。</p>
<h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>在Microsoft Word中选择Insert-&gt;Get Add-Ins-&gt;搜索Mendeley，装上之后在References工具栏会出现Mendeley Cite。登录刚刚创建的Mendeley账号，即可进行引用。</p>
]]></content>
      <tags>
        <tag>config</tag>
      </tags>
  </entry>
  <entry>
    <title>Response-Letter的写作</title>
    <url>/2020/08/05/Response-Letter%E7%9A%84%E5%86%99%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="Response-Letter是什么"><a href="#Response-Letter是什么" class="headerlink" title="Response Letter是什么"></a>Response Letter是什么</h2><p>在投稿期刊论文时，需要进行一至多轮的review。在收到review结果后，论文作者需要整理该结果中的问题，并对其逐一进行解答。本文简要概述response letter写作中的注意事项。</p>
<h2 id="基本框架"><a href="#基本框架" class="headerlink" title="基本框架"></a>基本框架</h2><h3 id="Synopsis"><a href="#Synopsis" class="headerlink" title="Synopsis"></a>Synopsis</h3><p>介绍response letter的结构。</p>
<h3 id="Our-first-submission"><a href="#Our-first-submission" class="headerlink" title="Our first submission"></a>Our first submission</h3><p>简要解释初稿的大致内容和贡献。</p>
<h3 id="Our-second-submission"><a href="#Our-second-submission" class="headerlink" title="Our second submission"></a>Our second submission</h3><p>简要解释第二次投稿（如果有）在第一稿上的改动；如果有第三次投稿就再增加Our third submission。</p>
<h3 id="Our-revised-submission"><a href="#Our-revised-submission" class="headerlink" title="Our revised submission"></a>Our revised submission</h3><p>简要解释最后一次改动后修改的内容。</p>
<h3 id="Answer-to-Comment-Editor"><a href="#Answer-to-Comment-Editor" class="headerlink" title="Answer to Comment: Editor"></a>Answer to Comment: Editor</h3><p>对编辑的review意见的回复。</p>
<h3 id="Answer-to-Comment-Reviewer-X"><a href="#Answer-to-Comment-Reviewer-X" class="headerlink" title="Answer to Comment: Reviewer X"></a>Answer to Comment: Reviewer X</h3><p>对reviewer X意见的回复；需要对每个reviewer的意见分别逐一回复。</p>
<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p>Response letter中的引用。</p>
<h2 id="写作核心思想"><a href="#写作核心思想" class="headerlink" title="写作核心思想"></a>写作核心思想</h2><ol>
<li><p>Reviewer问什么，就回答什么。不要回答无关内容。</p>
</li>
<li><p>回答逻辑上要合理：先回答一般性内容，再回答细节内容。</p>
</li>
</ol>
<h2 id="写作细节问题"><a href="#写作细节问题" class="headerlink" title="写作细节问题"></a>写作细节问题</h2><ol>
<li><p>每个comment的回答第一句要写上：”Thank you for the comment.”</p>
</li>
<li><p>如果需要在回答中引用reviewer的原话，需要斜体+引号。</p>
</li>
<li><p>专有名词设置成macro，保持格式/语法一致（例如统一斜体）。</p>
</li>
<li><p>文中新定义的名词如果需要使用缩写，在定义时即可说明，然后统一使用缩写。不应在定义前提及新定义名词。</p>
</li>
<li><p>双引号要正确使用：latex中是``和’’，而不是“”。</p>
</li>
</ol>
<h2 id="Latex模板"><a href="#Latex模板" class="headerlink" title="Latex模板"></a>Latex模板</h2><p><a href="https://www.overleaf.com/2454561743cmwzvycpggpv" target="_blank" rel="noopener">https://www.overleaf.com/2454561743cmwzvycpggpv</a></p>
]]></content>
      <tags>
        <tag>writing</tag>
      </tags>
  </entry>
  <entry>
    <title>c++的struct和class（重新发布）</title>
    <url>/2020/07/14/c-%E7%9A%84struct%E5%92%8Cclass%EF%BC%88%E9%87%8D%E6%96%B0%E5%8F%91%E5%B8%83%EF%BC%89/</url>
    <content><![CDATA[<h2 id="总述"><a href="#总述" class="headerlink" title="总述"></a>总述</h2><p>在学习c++的时候会遇到一个问题：<strong>什么时候使用struct，什么时候使用class？</strong></p>
<h2 id="C的struct"><a href="#C的struct" class="headerlink" title="C的struct"></a>C的struct</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct tag &#123; </span><br><span class="line">    member1;</span><br><span class="line">    member2; </span><br><span class="line">    member3;  </span><br><span class="line">    ...</span><br><span class="line">&#125; variable;</span><br></pre></td></tr></table></figure>

<p><strong>tag</strong> 是结构体标签。<br><strong>member</strong> 是标准的变量定义，比如 int i; 或者 float f; 或者其他有效的变量定义。<br><strong>variable</strong> 结构变量，定义在结构的末尾，最后一个分号之前，可以指定一个或多个结构变量。<br>一般情况下，上述三个变量至少要出现2个。</p>
<p>struct不能给内部变量初始化。<br>值得一提的是，在C中struct是用来封装数据的(<strong>member</strong>可以包含一个或多个基本数据类型，也可以包含其它结构体)，但是其中不能够有成员函数。</p>
<p>想要C语言中的struct中包含成员函数，只能通过函数指针去替代成员函数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">  </span><br><span class="line">void test(int input) &#123;</span><br><span class="line">        printf(&quot;%d&quot;,input);</span><br><span class="line">&#125;</span><br><span class="line">typedef struct _tag &#123;</span><br><span class="line">        void (*func)(int);</span><br><span class="line">&#125; Tag;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">  Tag tag;</span><br><span class="line">  tag.func &#x3D; &amp;test;</span><br><span class="line">  tag.func(0);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="C-的struct"><a href="#C-的struct" class="headerlink" title="C++的struct"></a>C++的struct</h2><h3 id="C-的struct和class的关联"><a href="#C-的struct和class的关联" class="headerlink" title="C++的struct和class的关联"></a>C++的struct和class的关联</h3><p>回到正题，c++中继承了在c语言中的用法，但是又做了改进：可以包含成员函数。从可实现功能上来看，struct和class基本上没有什么区别了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">typedef struct _tag &#123;</span><br><span class="line">        void func(int input) &#123;</span><br><span class="line">                printf(&quot;%d&quot;,input);</span><br><span class="line">        &#125;;</span><br><span class="line">&#125; Tag;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">  Tag tag;</span><br><span class="line">  tag.func(0);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 令人疑惑的是，在mac环境下居然这段代码用gcc编译也通过了，还能正常运行。</span><br><span class="line">&#x2F;&#x2F; 应当在ubuntu环境下是不能编译通过的。</span><br></pre></td></tr></table></figure>

<h3 id="C-的struct和class的区别"><a href="#C-的struct和class的区别" class="headerlink" title="C++的struct和class的区别"></a>C++的struct和class的区别</h3><p>默认修饰符：struct是public，class是private。以下的代码从逻辑上是等价的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class A &#123;</span><br><span class="line">	int A_a;</span><br><span class="line">public:</span><br><span class="line">	int A_b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct B &#123;</span><br><span class="line">	int B_b;</span><br><span class="line">private:</span><br><span class="line">	int B_a;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>默认继承方式是：struct是public继承，class是private继承。建议在继承时需要显示地指明修饰符。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class A &#123;</span><br><span class="line">	int A_a;</span><br><span class="line">public:</span><br><span class="line">	int A_b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct B : public A &#123;</span><br><span class="line">	&#x2F;&#x2F; 建议在继承时需要显示地指明修饰符</span><br><span class="line">	int B_b;</span><br><span class="line">private:</span><br><span class="line">	int B_a;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>c++</tag>
        <tag>coding</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/07/10/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><p>On windows, add “npx” prefix.</p>
<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br><span class="line">$ <span class="comment"># Or</span></span><br><span class="line">$ hexo new draft <span class="string">"New draft"</span></span><br><span class="line">$ hexo publish <span class="string">"New draft"</span></span><br></pre></td></tr></table></figure>

<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br><span class="line">$ <span class="comment"># Or</span></span><br><span class="line">$ hexo server --draft</span><br></pre></td></tr></table></figure>

<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy <span class="comment"># This will only deploy generated files to remote sites! Nedd to backup source by yourself!</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>config</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo+next主题配置之怎么配成我这样</title>
    <url>/2020/07/14/hexo-next%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E4%B9%8B%E6%80%8E%E4%B9%88%E9%85%8D%E6%88%90%E6%88%91%E8%BF%99%E6%A0%B7/</url>
    <content><![CDATA[<h2 id="总述"><a href="#总述" class="headerlink" title="总述"></a>总述</h2><p>这篇文用来介绍本站点使用的Hexo+Next主题配置及各种相关的依赖配置。</p>
<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>什么是hexo：一个基于Node.js的博客框架<br>什么是next：hexo的一个主题</p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="第一步：Node-js，npm环境配置"><a href="#第一步：Node-js，npm环境配置" class="headerlink" title="第一步：Node.js，npm环境配置"></a>第一步：Node.js，npm环境配置</h3><p>Windows：移步<a href="https://juejin.im/post/5a92b735f265da4e761fea22" target="_blank" rel="noopener">https://juejin.im/post/5a92b735f265da4e761fea22</a><br>MacOS：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install node</span><br><span class="line">brew install npm</span><br></pre></td></tr></table></figure>

<h3 id="第二步：hexo的安装"><a href="#第二步：hexo的安装" class="headerlink" title="第二步：hexo的安装"></a>第二步：hexo的安装</h3><p>Windows：这有个坑“所有hexo命令前需要加npx，不然就会：’hexo’ 不是内部或外部命令，也不是可运行的程序或批处理文件。”</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br><span class="line">$ npx hexo init your-hexo-site</span><br><span class="line">$ cd your-hexo-site</span><br><span class="line">$ npm install</span><br><span class="line">$ npx hexo server</span><br></pre></td></tr></table></figure>
<p>MacOS：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br><span class="line">$ hexo init your-hexo-site</span><br><span class="line">$ cd your-hexo-site</span><br><span class="line">$ npm install</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<h3 id="第三步：Next的安装"><a href="#第三步：Next的安装" class="headerlink" title="第三步：Next的安装"></a>第三步：Next的安装</h3><p><strong>这里只针对v7.8及以上版本，老的版本教程很多过时了</strong></p>
<h4 id="从源安装Next主题"><a href="#从源安装Next主题" class="headerlink" title="从源安装Next主题"></a>从源安装Next主题</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd your-hexo-site</span><br><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next.git themes&#x2F;next</span><br><span class="line">$ # next的git repo迁移过了，用官方的</span><br></pre></td></tr></table></figure>

<h4 id="改动站点根目录下的-config-yml，指定使用Next主题"><a href="#改动站点根目录下的-config-yml，指定使用Next主题" class="headerlink" title="改动站点根目录下的_config.yml，指定使用Next主题"></a>改动站点根目录下的_config.yml，指定使用Next主题</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>
<p>改动theme/next目录下的_config.yml，更改Next样式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br><span class="line">scheme: Gemini</span><br><span class="line"></span><br><span class="line"># 设置站点配置语言</span><br><span class="line">language: zh-CN #简体中文，英文是en</span><br><span class="line"></span><br><span class="line"># 改作者名</span><br><span class="line">copyright: your-name</span><br><span class="line"></span><br><span class="line"># 自定义配置文件路径，注意！此处路径是在Hexo目录下而非theme&#x2F;next目录下</span><br><span class="line">custom_file_path:</span><br><span class="line">  #head: source&#x2F;_data&#x2F;head.swig</span><br><span class="line">  #header: source&#x2F;_data&#x2F;header.swig</span><br><span class="line">  #sidebar: source&#x2F;_data&#x2F;sidebar.swig</span><br><span class="line">  #postMeta: source&#x2F;_data&#x2F;post-meta.swig</span><br><span class="line">  #postBodyEnd: source&#x2F;_data&#x2F;post-body-end.swig</span><br><span class="line">  #footer: source&#x2F;_data&#x2F;footer.swig</span><br><span class="line">  #bodyEnd: source&#x2F;_data&#x2F;body-end.swig</span><br><span class="line">  variable: source&#x2F;_data&#x2F;variables.styl</span><br><span class="line">  #mixin: source&#x2F;_data&#x2F;mixins.styl</span><br><span class="line">  style: source&#x2F;_data&#x2F;styles.styl</span><br></pre></td></tr></table></figure>

<h4 id="自定义样式文件"><a href="#自定义样式文件" class="headerlink" title="自定义样式文件"></a>自定义样式文件</h4><p>variables.styl内容是（值得一提的是，原作者的设置也在这里做出了改动）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Custom styles.</span><br><span class="line"></span><br><span class="line">&#x2F;* 背景设置 *&#x2F;</span><br><span class="line">&#x2F;* 给页面内的所有元素设置一个带透明度的白色背景色 *&#x2F;</span><br><span class="line">&#x2F;&#x2F; 页面的几大部分</span><br><span class="line">[class&#x3D;&quot;container sidebar-position-left &quot;], .main, [class$&#x3D;&quot;page-home&quot;] #footer,</span><br><span class="line">[class$&#x3D;&quot;page-post-detail&quot;] #footer, .page-archive &#123;</span><br><span class="line">    background: rgba(255, 255, 255, 0.83);</span><br><span class="line">&#125;</span><br><span class="line">[class&#x3D;&quot;container sidebar-position-left &quot;] .main,</span><br><span class="line">[class$&#x3D;&quot;sidebar-position-left&quot;] #footer, .page-archive .main &#123;</span><br><span class="line">    background: transparent;</span><br><span class="line">&#125;</span><br><span class="line">.pagination, .post-block, .comments,</span><br><span class="line">.container .header-inner, .sidebar-inner &#123;</span><br><span class="line">    background: rgba(255, 255, 255, 0.45);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 评论区</span><br><span class="line">.gt-comment-content &#123;</span><br><span class="line">    background-color: rgba(255, 255, 255, 0.42) ;</span><br><span class="line">    box-shadow: 0 2px 2px 0 rgba(0,0,0,0.12), 0 3px 1px -2px rgba(0,0,0,0.06), 0 1px 5px 0 rgba(0,0,0,0.12);</span><br><span class="line"></span><br><span class="line">    &amp;:hover &#123;</span><br><span class="line">        box-shadow: 0 2px 2px 0 #6190e8b8, 0 3px 1px -2px #6190e8b8, 0 1px 5px 0 #6190e8b8 !important;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 显示目录的侧边栏</span><br><span class="line">#sidebar &#123;</span><br><span class="line">    background: rgba(255, 255, 255, 0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 菜单</span><br><span class="line">.menu .menu-item a:hover &#123;</span><br><span class="line">    background: #2222223b;</span><br><span class="line">    border-bottom-color: transparent;   </span><br><span class="line">&#125;</span><br><span class="line">.menu-item-active a &#123;</span><br><span class="line">    background: #fbcb3fbd;</span><br><span class="line">    border-bottom-color: transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; NexT主题特有的选项卡元素</span><br><span class="line">.tabs ul.nav-tabs li.tab.active,</span><br><span class="line">.tabs .tab-content &#123;</span><br><span class="line">    background-color: rgba(255, 255, 255, 0.62) !important;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;* 页面中某些部分的大小 *&#x2F;</span><br><span class="line">&#x2F;&#x2F; 归档页面的页脚</span><br><span class="line">.page-archive #footer &#123;</span><br><span class="line">    position: inherit;</span><br><span class="line">    height: auto;</span><br><span class="line">    padding-top: 2.7%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 详细分类页面和总分类页面的页脚</span><br><span class="line">[class$&#x3D;&quot;sidebar-position-left &quot;] #footer,</span><br><span class="line">[class$&#x3D;&quot;page-post-detail&quot;] #footer &#123;</span><br><span class="line">    padding-top: 3.98%</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 详细分类页面的主要部分</span><br><span class="line">[class$&#x3D;&quot;sidebar-position-left &quot;] &#123;</span><br><span class="line">    padding-bottom: calc(100vh - 89.5vh);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;* 侧边栏目录 *&#x2F;</span><br><span class="line">&#x2F;&#x2F; 普通状态下的超链接状态</span><br><span class="line">.post-toc ol a &#123;</span><br><span class="line">    border-bottom-color: transparent;</span><br><span class="line">    &amp;:hover &#123;</span><br><span class="line">        border-bottom-color: #666;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; active状态下的超链接样式</span><br><span class="line">.post-toc .nav li[class$&#x3D;&quot;active&quot;]&gt;.nav-link &#123;</span><br><span class="line">    border-bottom-color: transparent;</span><br><span class="line">    &amp;:hover &#123;</span><br><span class="line">        border-bottom-color: #fc6423;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 当前正在访问的超链接样式</span><br><span class="line">.post-toc .nav li[class$&#x3D;&quot;active-current&quot;]&gt;.nav-link &#123;</span><br><span class="line">    color: white;</span><br><span class="line">    background: #337ab7;</span><br><span class="line">    border-radius: 3.6px;</span><br><span class="line">    display: block;</span><br><span class="line">    padding: 5px 7px;</span><br><span class="line">    border-bottom-color: transparent;</span><br><span class="line">    &amp;:hover &#123;</span><br><span class="line">        background: orange;</span><br><span class="line">        color: black;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">.site-state-item &#123;</span><br><span class="line">    border-left: 1px solid #b1b1b1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 各级目录的显示宽度 - 主要是为了不让边框超出侧边栏</span><br><span class="line">.post-toc .nav .active-current.nav-level-2 a &#123;</span><br><span class="line">    width: 303px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.post-toc .nav .active-current.nav-level-3 a &#123;</span><br><span class="line">    width: 296px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.post-toc .nav .active-current.nav-level-4 a &#123;</span><br><span class="line">    width: 286px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.post-toc .nav .active-current.nav-level-5 a &#123;</span><br><span class="line">    width: 276px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.post-toc .nav .active-current.nav-level-6 a &#123;</span><br><span class="line">    width: 266px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.post-toc &#123;</span><br><span class="line">    width: calc(100% + 17px);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;* 标题 *&#x2F;</span><br><span class="line">&#x2F;&#x2F; 点进文章，文章的主标题</span><br><span class="line">.posts-expand article:only-of-type h1 &#123;</span><br><span class="line">    font-size: 37px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 二级标题(正常显示器分辨率)</span><br><span class="line">&#x2F;&#x2F; 其实要在左下角和右下角加上一个折角、翻折的效果（一个三角形）</span><br><span class="line">.post-body h2 &#123;</span><br><span class="line">    border: 1px solid #ddd;</span><br><span class="line">    border-radius: 2px;</span><br><span class="line">    font-weight: bold;</span><br><span class="line">    height: 48px;</span><br><span class="line">    line-height: 40px;</span><br><span class="line">    margin: 20px -42.3px 15px -48px;</span><br><span class="line">    padding-left: 1.7%;</span><br><span class="line">    position: relative;</span><br><span class="line">    background-color: #ecf6f7;</span><br><span class="line">    box-shadow: 0 2px 2px 0 rgba(0,0,0,0.12), 0 3px 1px -2px rgba(0,0,0,0.06), 0 1px 5px 0 rgba(0,0,0,0.12);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 二级标题(移动终端分辨率)</span><br><span class="line">@media (min-width: 768px) and (max-width: 991px) &#123;</span><br><span class="line">    .main .post-body h2 &#123;</span><br><span class="line">        margin: 20px -23px 15px -28px;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">@media (max-width: 767px) &#123;</span><br><span class="line">    .main .post-body h2 &#123;</span><br><span class="line">        margin: 20px -15px 15px -18px;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 三级标题</span><br><span class="line">.post-body h3 &#123;</span><br><span class="line">    border-bottom: 1px solid #cfd8dc!important;</span><br><span class="line">    padding-bottom: 0.3em;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;* 文章页面内的各种元素 *&#x2F;</span><br><span class="line">&#x2F;&#x2F; note块元素</span><br><span class="line">.post-body .note &#123;</span><br><span class="line">    border-color: #ddd;</span><br><span class="line">    background-color: #f9f9f980;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 文章内的普通超链接</span><br><span class="line">.post-body a &#123;</span><br><span class="line">    color: #0593d3;</span><br><span class="line">    &#x2F;&#x2F; border-bottom: none;</span><br><span class="line">    &#x2F;&#x2F; 这行会把阅读全文图标干掉，慎用</span><br><span class="line">    &amp;:hover &#123;</span><br><span class="line">        color: #FF4500;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;代码块内的超链接</span><br><span class="line">.post-body a code &#123;</span><br><span class="line">    color: #0593d3;</span><br><span class="line">    border-bottom: none;</span><br><span class="line">    &amp;:hover &#123;</span><br><span class="line">        color: #FF4500;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 分页导航（上&#x2F;下一篇文章的超链接）</span><br><span class="line">.post-nav-item a &#123;</span><br><span class="line">    color: #0593d3;</span><br><span class="line">    border-bottom: none;</span><br><span class="line">    &amp;:hover &#123;</span><br><span class="line">        color: #FF4500;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 阅读全文的按钮</span><br><span class="line">.post-button a &#123;</span><br><span class="line">    &amp;:hover &#123;</span><br><span class="line">        font-weight: bold;</span><br><span class="line">        font-size: larger;</span><br><span class="line">        background-color: cornsilk;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 阅读全文按钮的超链接</span><br><span class="line">.post-button .btn &#123;</span><br><span class="line">    border-bottom: 2px solid #555;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 无序列表</span><br><span class="line">.posts-expand .post-body ul li &#123;</span><br><span class="line">    list-style: disc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 有序列表</span><br><span class="line">.posts-expand .post-body ol &#123;</span><br><span class="line">    counter-reset: counter;</span><br><span class="line">&#125;</span><br><span class="line">.posts-expand .post-body ol&gt;li &#123;</span><br><span class="line">    list-style-type: none;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line">.posts-expand .post-body ol&gt;li:before &#123;</span><br><span class="line">    counter-increment: counter;</span><br><span class="line">    content: counter(counter);</span><br><span class="line">    background: #49b1f5; </span><br><span class="line">    color: #fff;</span><br><span class="line">    font-size: 12px;</span><br><span class="line">    font-weight: 500;</span><br><span class="line">    line-height: 1;</span><br><span class="line">    text-align: center;</span><br><span class="line">    padding: 3px;</span><br><span class="line">    height: 13px;</span><br><span class="line">    width: 13px;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">    position: absolute;</span><br><span class="line">    left: -27px;</span><br><span class="line">    top: 5px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; fancybox图片</span><br><span class="line">.posts-expand .post-body .fancybox img &#123;</span><br><span class="line">    display: block !important;</span><br><span class="line">    margin-left: 0px;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">    cursor: zoom-in;</span><br><span class="line">    cursor: -webkit-zoom-in;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 图片底下的描述性文字</span><br><span class="line">.post-body .image-caption, .post-body .figure .caption &#123;</span><br><span class="line">    text-align: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; label块</span><br><span class="line">.post-body .label &#123;</span><br><span class="line">    font-weight: bold;</span><br><span class="line">    border-radius: .25em;</span><br><span class="line">    margin: 0px 3px 0px 3px;</span><br><span class="line">    padding: 3px 4px;</span><br><span class="line">&#125;</span><br><span class="line">.post-body .label.primary &#123;</span><br><span class="line">    background-color: #ecd6ff;</span><br><span class="line">&#125;</span><br><span class="line">.post-body .label.info &#123;</span><br><span class="line">    background-color: #c3e8f9;</span><br><span class="line">&#125;</span><br><span class="line">.post-body .label.success &#123;</span><br><span class="line">    background-color: #b2eabb;</span><br><span class="line">&#125;</span><br><span class="line">.post-body .label.default &#123;</span><br><span class="line">    background-color: #dcdcdc;</span><br><span class="line">&#125;</span><br><span class="line">.post-body .label.warning &#123;</span><br><span class="line">    background-color: #ffe89a;</span><br><span class="line">&#125;</span><br><span class="line">.post-body .label.danger &#123;</span><br><span class="line">    background-color: #f9c1ca;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 代码区</span><br><span class="line">.highlight .code pre &#123;</span><br><span class="line">    background-color: transparent;</span><br><span class="line">&#125;</span><br><span class="line">.highlight &#123;</span><br><span class="line">    background-color: #f9f9f980;</span><br><span class="line">    border: 1px solid #ddd;</span><br><span class="line">    border-radius: 2px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 原样输出的代码块</span><br><span class="line">pre &#123;</span><br><span class="line">    background: #f9f9f980;</span><br><span class="line">    border: 1px solid #ddd;</span><br><span class="line">    border-radius: 2px;</span><br><span class="line">&#125;</span><br><span class="line">pre code &#123;</span><br><span class="line">    border: transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 块引用</span><br><span class="line">blockquote &#123;</span><br><span class="line">    background-color: #f9f9f980;</span><br><span class="line">    border-left-color: #6b8afb;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 表格奇数行</span><br><span class="line">.highlight table&gt;tbody&gt;tr &#123;</span><br><span class="line">    &amp;:nth-of-type(odd) &#123; </span><br><span class="line">        background-color: transparent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 表格每一行鼠标经过时的颜色</span><br><span class="line">table&gt;tbody&gt;tr &#123;</span><br><span class="line">    &amp;:hover &#123;</span><br><span class="line">        background-color: #FFFFF0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 表格的单元格</span><br><span class="line">table td, table th &#123;</span><br><span class="line">    border-right: 1px solid #dcdcdc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 侧边栏头部</span><br><span class="line">.site-meta &#123;</span><br><span class="line">    background: #0072E3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 文章底部的标签</span><br><span class="line">.posts-expand .post-tags a &#123;</span><br><span class="line">    background: #e6e6e6;</span><br><span class="line">    padding: 3px 4px;</span><br><span class="line">    border-radius: 3px;</span><br><span class="line">    color: #2ca6cb;</span><br><span class="line">    border-bottom: none;</span><br><span class="line">    &amp;:hover &#123;</span><br><span class="line">        color: white;</span><br><span class="line">        background: #2ca6cb;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 分割线</span><br><span class="line">hr &#123;</span><br><span class="line">    margin: 0px 0px 0px 0px;</span><br><span class="line">    height: 1px;</span><br><span class="line">    border: none;</span><br><span class="line">    background-image: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; code代码块</span><br><span class="line">code &#123;</span><br><span class="line">    background: #dcdcdc;</span><br><span class="line">    margin: 0 2px 0 2px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 选项卡被选中的那一项</span><br><span class="line">.tabs ul.nav-tabs li.tab.active a &#123;</span><br><span class="line">    font-size: 19px;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 浏览器滚动条</span><br><span class="line">::-webkit-scrollbar &#123;</span><br><span class="line">    width: 8px;</span><br><span class="line">    height: 8px;</span><br><span class="line">&#125;</span><br><span class="line">::-webkit-scrollbar-thumb &#123;</span><br><span class="line">    background: #49b1f5;</span><br><span class="line">&#125;</span><br><span class="line">::-webkit-scrollbar-track &#123;</span><br><span class="line">    background-color: transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>styles.styl的内容是（用于调整主题显示宽度）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$content-desktop         &#x3D; 97.7%</span><br><span class="line">$content-desktop-large   &#x3D; 97.7%</span><br><span class="line">$content-desktop-largest &#x3D; 97.7%</span><br></pre></td></tr></table></figure>


<h4 id="自定义背景图"><a href="#自定义背景图" class="headerlink" title="自定义背景图"></a>自定义背景图</h4><p>根据自定义样式原作者ExtremeGTR的博客描述：<br>    “自定义背景图的配置还是没法解耦出来，或许只是我想不到办法而已，我的自定义配置仍然要写到NexT的js文件里，但还是有一点点变化的。<br>    自定义[]的配置要写到\themes\next\source\js\next-boot.js里。”<br><strong>刷新界面随机加载背景图</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(document).ready(function () &#123;</span><br><span class="line">    &#x2F;&#x2F; 在最开头或者任意一处加入我们的功能：随机选取1个背景图并加载的代码</span><br><span class="line">    var backgroundImgUrls &#x3D; [</span><br><span class="line">        &quot;图片地址1&quot;,</span><br><span class="line">        &quot;图片地址2&quot;,</span><br><span class="line">        &quot;图片地址3&quot;,</span><br><span class="line">        &quot;图片地址4&quot;,</span><br><span class="line">        &quot;图片地址5&quot;,</span><br><span class="line">        &quot;图片地址6&quot;,</span><br><span class="line">        &#x2F;&#x2F; ...</span><br><span class="line">        &quot;图片地址n&quot;</span><br><span class="line">    ];</span><br><span class="line">    var randomIndex &#x3D; Math.floor(Math.random() * (backgroundImgUrls.length + 1));</span><br><span class="line">    if (randomIndex &#x3D;&#x3D; backgroundImgUrls.length) &#123;</span><br><span class="line">        $(&quot;body&quot;).css(&#123;&quot;background-color&quot;:&quot;white&quot;&#125;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        var background_image &#x3D; &quot;url(&quot; + backgroundImgUrls[randomIndex] + &quot;)&quot;;</span><br><span class="line">        $(&quot;body&quot;).css(&#123;&quot;background&quot;:background_image, &quot;background-attachment&quot;:&quot;fixed&quot;, &quot;background-size&quot;:&quot;cover&quot;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;...NexT原有的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="点击出现小红心"><a href="#点击出现小红心" class="headerlink" title="点击出现小红心"></a>点击出现小红心</h4><p>在<code>\theme\*\source\js</code>下新建click.js复制以下代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">!function(e,t,a)&#123;function n()&#123;c(&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#39;&#39;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;),o(),r()&#125;function r()&#123;for(var e&#x3D;0;e&lt;d.length;e++)d[e].alpha&lt;&#x3D;0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+&#x3D;.004,d[e].alpha-&#x3D;.013,d[e].el.style.cssText&#x3D;&quot;left:&quot;+d[e].x+&quot;px;top:&quot;+d[e].y+&quot;px;opacity:&quot;+d[e].alpha+&quot;;transform:scale(&quot;+d[e].scale+&quot;,&quot;+d[e].scale+&quot;) rotate(45deg);background:&quot;+d[e].color+&quot;;z-index:99999&quot;);requestAnimationFrame(r)&#125;function o()&#123;var t&#x3D;&quot;function&quot;&#x3D;&#x3D;typeof e.onclick&amp;&amp;e.onclick;e.onclick&#x3D;function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a&#x3D;t.createElement(&quot;div&quot;);a.className&#x3D;&quot;heart&quot;,d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a&#x3D;t.createElement(&quot;style&quot;);a.type&#x3D;&quot;text&#x2F;css&quot;;try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText&#x3D;e&#125;t.getElementsByTagName(&quot;head&quot;)[0].appendChild(a)&#125;function s()&#123;return&quot;rgb(&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;)&quot;&#125;var d&#x3D;[];e.requestAnimationFrame&#x3D;function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3&#x2F;60)&#125;&#125;(),n()&#125;(window,document);</span><br></pre></td></tr></table></figure>
<p>在<code>\themes\*\layout\_layout.swig</code>文件末尾添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 页面点击小红心 --&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;js&#x2F;click.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="改动主题配置文件-config-yml"><a href="#改动主题配置文件-config-yml" class="headerlink" title="改动主题配置文件_config.yml"></a>改动主题配置文件_config.yml</h4><p>激活gitalk</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Multiple Comment System Support</span><br><span class="line">comments:</span><br><span class="line">  # Available values: tabs | buttons</span><br><span class="line">  style: tabs</span><br><span class="line">  # Choose a comment system to be displayed by default.</span><br><span class="line">  # Available values: changyan | disqus | disqusjs | gitalk | livere | valine</span><br><span class="line">  active: gitalk</span><br><span class="line">  # Setting &#96;true&#96; means remembering the comment system selected by the visitor.</span><br><span class="line">  storage: true</span><br><span class="line">  # Lazyload all comment systems.</span><br><span class="line">  lazyload: false</span><br><span class="line">  # Modify texts or order for any navs, here are some examples.</span><br><span class="line">  nav:</span><br><span class="line">    #disqus:</span><br><span class="line">    #  text: Load Disqus</span><br><span class="line">    #  order: -1</span><br><span class="line">    #gitalk:</span><br><span class="line">    #  order: -2</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Gitalk</span><br><span class="line"># For more information: https:&#x2F;&#x2F;gitalk.github.io, https:&#x2F;&#x2F;github.com&#x2F;gitalk&#x2F;gitalk</span><br><span class="line">gitalk:</span><br><span class="line">  enable: true</span><br><span class="line">  github_id:  # GitHub repo owner</span><br><span class="line">  repo:  # Repository name to store issues</span><br><span class="line">  client_id:  # GitHub Application Client ID</span><br><span class="line">  client_secret:  # GitHub Application Client Secret</span><br><span class="line">  admin_user:  # GitHub repo owner and collaborators, only these guys can initialize gitHub issues</span><br><span class="line">  distraction_free_mode: true # Facebook-like distraction free mode</span><br><span class="line">  # Gitalk&#39;s display language depends on user&#39;s browser or system environment</span><br><span class="line">  # If you want everyone visiting your site to see a uniform language, you can set a force language value</span><br><span class="line">  # Available values: en | es-ES | fr | ru | zh-CN | zh-TW</span><br><span class="line">  language: en</span><br></pre></td></tr></table></figure>

<h3 id="第四步：插件配置"><a href="#第四步：插件配置" class="headerlink" title="第四步：插件配置"></a>第四步：插件配置</h3><p>这里是<a href="https://hexo.io/plugins/" target="_blank" rel="noopener">hexo插件全家桶</a>的页面，以下推荐:</p>
<h4 id="hexo-deploy-git插件配置"><a href="#hexo-deploy-git插件配置" class="headerlink" title="hexo-deploy-git插件配置"></a><strong>hexo-deploy-git</strong>插件配置</h4><p>用途：hexo deploy一键部署</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>在Hexo站点下的_config.yml文件添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;your-id&#x2F;your-id.github.io</span><br><span class="line">  branch: master</span><br><span class="line">  message:</span><br></pre></td></tr></table></figure>

<h4 id="symbols-count-time插件配置"><a href="#symbols-count-time插件配置" class="headerlink" title="symbols_count_time插件配置"></a><strong>symbols_count_time</strong>插件配置</h4><p>用途：计算字数和阅读时间</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-symbols-count-time</span><br></pre></td></tr></table></figure>

<p>在Hexo站点下的_config.yml文件添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  symbols: true</span><br><span class="line">  time: true</span><br><span class="line">  total_symbols: true</span><br><span class="line">  total_time: true</span><br><span class="line">  exclude_codeblock: false</span><br><span class="line">  awl: 4</span><br><span class="line">  wpm: 275</span><br><span class="line">  suffix: &quot;mins.&quot;</span><br></pre></td></tr></table></figure>

<h4 id="hexo-generator-searchdb插件配置"><a href="#hexo-generator-searchdb插件配置" class="headerlink" title="hexo-generator-searchdb插件配置"></a><strong>hexo-generator-searchdb</strong>插件配置</h4><p>用途：站点内搜索</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<p>!注意此处不要-g全局安装</p>
<p>在Hexo站点下的_config.yml文件添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br><span class="line">  content: true</span><br></pre></td></tr></table></figure>

<p>在Next主题的_config.yml文件修改<code>local search</code><br>把enable: false修改为true</p>
<h4 id="hexo-helper-live2d插件配置"><a href="#hexo-helper-live2d插件配置" class="headerlink" title="hexo-helper-live2d插件配置"></a><strong>hexo-helper-live2d</strong>插件配置</h4><p>用途：萌萌哒</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-helper-live2d</span><br></pre></td></tr></table></figure>
<p>可以上github找找喜欢的模型，以下使用<ModelName>指代模型名称:<br>在Hexo站点下的_config.yml文件添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">live2d:</span><br><span class="line">  enable: true</span><br><span class="line">  scriptFrom: local</span><br><span class="line">  pluginRootPath: live2dw&#x2F;</span><br><span class="line">  pluginJsPath: lib&#x2F;</span><br><span class="line">  pluginModelPath: assets&#x2F;</span><br><span class="line">  tagMode: false</span><br><span class="line">  log: false</span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-&lt;ModelName&gt;</span><br><span class="line">  display:</span><br><span class="line">    position: right</span><br><span class="line">    width: 150</span><br><span class="line">    height: 300</span><br><span class="line">  mobile:</span><br><span class="line">    show: true</span><br></pre></td></tr></table></figure>
<p>在Hexo站点根目录下新建文件夹<code>live2d_models</code><br>然后在<code>node_modules</code>文件夹下找到下载好的模型，拷贝到<code>live2d_models</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd &lt;hexo-root-path&gt;</span><br><span class="line">$ mkdir live2d_models</span><br><span class="line">$ npm install live2d-widget-model-&lt;ModelName&gt;</span><br><span class="line">$ cp -r node_modules&#x2F;live2d-widget-model-&lt;ModelName&gt; live2d_models</span><br></pre></td></tr></table></figure>

<h4 id="travis-CI配置"><a href="#travis-CI配置" class="headerlink" title="travis-CI配置"></a><strong>travis-CI配置</strong></h4><p>详见<a href="https://hexo.io/docs/github-pages.html，作者没配直接本地hexo" target="_blank" rel="noopener">https://hexo.io/docs/github-pages.html，作者没配直接本地hexo</a> generate &amp;&amp; hexo deploy</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://juejin.im/post/5a92b735f265da4e761fea22" target="_blank" rel="noopener">https://juejin.im/post/5a92b735f265da4e761fea22</a><br>[2] <a href="https://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">https://theme-next.iissnan.com/getting-started.html</a><br>[3] <a href="https://hexo.io/zh-cn/index.html" target="_blank" rel="noopener">https://hexo.io/zh-cn/index.html</a><br>[4] <a href="https://extremegtr.github.io/2017/09/27/Customize-NexT-Gemini-theme/" target="_blank" rel="noopener">https://extremegtr.github.io/2017/09/27/Customize-NexT-Gemini-theme/</a><br>[5] <a href="https://hexo.io/zh-cn/docs/one-command-deployment.html" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/one-command-deployment.html</a><br>[6] <a href="https://hexo.io/docs/github-pages.html" target="_blank" rel="noopener">https://hexo.io/docs/github-pages.html</a><br>[7] <a href="https://hexo.io/plugins/" target="_blank" rel="noopener">https://hexo.io/plugins/</a></p>
]]></content>
      <tags>
        <tag>config</tag>
      </tags>
  </entry>
  <entry>
    <title>maven的源配置(更新)</title>
    <url>/2020/08/05/maven%E7%9A%84%E6%BA%90%E9%85%8D%E7%BD%AE-%E6%9B%B4%E6%96%B0/</url>
    <content><![CDATA[<p>阿里云云效maven的站点查询 <a href="https://maven.aliyun.com/mvn/view" target="_blank" rel="noopener">https://maven.aliyun.com/mvn/view</a></p>
<ol>
<li>打开${maven_home}/conf/settings.xml</li>
<li><mirrors>中添加以下内容。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;mirror&gt;     </span><br><span class="line"> &lt;id&gt;aliyun-public&lt;&#x2F;id&gt;     </span><br><span class="line"> &lt;mirrorOf&gt;*&lt;&#x2F;mirrorOf&gt;     </span><br><span class="line"> &lt;name&gt;aliyun public&lt;&#x2F;name&gt;     </span><br><span class="line"> &lt;url&gt;https:&#x2F;&#x2F;maven.aliyun.com&#x2F;repository&#x2F;public&lt;&#x2F;url&gt; </span><br><span class="line">&lt;&#x2F;mirror&gt;  </span><br><span class="line">&lt;mirror&gt;     </span><br><span class="line"> &lt;id&gt;aliyun-central&lt;&#x2F;id&gt;     </span><br><span class="line"> &lt;mirrorOf&gt;*&lt;&#x2F;mirrorOf&gt;     </span><br><span class="line"> &lt;name&gt;aliyun central&lt;&#x2F;name&gt;     </span><br><span class="line"> &lt;url&gt;https:&#x2F;&#x2F;maven.aliyun.com&#x2F;repository&#x2F;central&lt;&#x2F;url&gt; </span><br><span class="line">&lt;&#x2F;mirror&gt;  </span><br><span class="line">&lt;mirror&gt;     </span><br><span class="line"> &lt;id&gt;aliyun-spring&lt;&#x2F;id&gt;     </span><br><span class="line"> &lt;mirrorOf&gt;*&lt;&#x2F;mirrorOf&gt;     </span><br><span class="line"> &lt;name&gt;aliyun spring&lt;&#x2F;name&gt;     </span><br><span class="line"> &lt;url&gt;https:&#x2F;&#x2F;maven.aliyun.com&#x2F;repository&#x2F;spring&lt;&#x2F;url&gt; </span><br><span class="line">&lt;&#x2F;mirror&gt;  </span><br><span class="line">&lt;mirror&gt;     </span><br><span class="line"> &lt;id&gt;aliyun-spring-plugin&lt;&#x2F;id&gt;     </span><br><span class="line"> &lt;mirrorOf&gt;*&lt;&#x2F;mirrorOf&gt;     </span><br><span class="line"> &lt;name&gt;aliyun spring-plugin&lt;&#x2F;name&gt;     </span><br><span class="line"> &lt;url&gt;https:&#x2F;&#x2F;maven.aliyun.com&#x2F;repository&#x2F;spring-plugin&lt;&#x2F;url&gt; </span><br><span class="line">&lt;&#x2F;mirror&gt;  </span><br><span class="line">&lt;mirror&gt;     </span><br><span class="line"> &lt;id&gt;aliyun-apache-snapshots&lt;&#x2F;id&gt;     </span><br><span class="line"> &lt;mirrorOf&gt;*&lt;&#x2F;mirrorOf&gt;     </span><br><span class="line"> &lt;name&gt;aliyun apache-snapshots&lt;&#x2F;name&gt;     </span><br><span class="line"> &lt;url&gt;https:&#x2F;&#x2F;maven.aliyun.com&#x2F;repository&#x2F;apache-snapshots&lt;&#x2F;url&gt; </span><br><span class="line">&lt;&#x2F;mirror&gt;  </span><br><span class="line">&lt;mirror&gt;     </span><br><span class="line"> &lt;id&gt;aliyun-google&lt;&#x2F;id&gt;     </span><br><span class="line"> &lt;mirrorOf&gt;*&lt;&#x2F;mirrorOf&gt;     </span><br><span class="line"> &lt;name&gt;aliyun google&lt;&#x2F;name&gt;     </span><br><span class="line"> &lt;url&gt;https:&#x2F;&#x2F;maven.aliyun.com&#x2F;repository&#x2F;google&lt;&#x2F;url&gt; </span><br><span class="line">&lt;&#x2F;mirror&gt;  </span><br><span class="line">&lt;mirror&gt;     </span><br><span class="line"> &lt;id&gt;aliyun-gradle-plugin&lt;&#x2F;id&gt;     </span><br><span class="line"> &lt;mirrorOf&gt;*&lt;&#x2F;mirrorOf&gt;     </span><br><span class="line"> &lt;name&gt;aliyun gradle-plugin&lt;&#x2F;name&gt;     </span><br><span class="line"> &lt;url&gt;https:&#x2F;&#x2F;maven.aliyun.com&#x2F;repository&#x2F;gradle-plugin&lt;&#x2F;url&gt; </span><br><span class="line">&lt;&#x2F;mirror&gt;  </span><br><span class="line">&lt;mirror&gt;     </span><br><span class="line"> &lt;id&gt;aliyun-jcenter&lt;&#x2F;id&gt;     </span><br><span class="line"> &lt;mirrorOf&gt;*&lt;&#x2F;mirrorOf&gt;     </span><br><span class="line"> &lt;name&gt;aliyun jcenter&lt;&#x2F;name&gt;     </span><br><span class="line"> &lt;url&gt;https:&#x2F;&#x2F;maven.aliyun.com&#x2F;repository&#x2F;jcenter&lt;&#x2F;url&gt; </span><br><span class="line">&lt;&#x2F;mirror&gt;  </span><br><span class="line">&lt;mirror&gt;     </span><br><span class="line"> &lt;id&gt;aliyun-releases&lt;&#x2F;id&gt;     </span><br><span class="line"> &lt;mirrorOf&gt;*&lt;&#x2F;mirrorOf&gt;     </span><br><span class="line"> &lt;name&gt;aliyun releases&lt;&#x2F;name&gt;     </span><br><span class="line"> &lt;url&gt;https:&#x2F;&#x2F;maven.aliyun.com&#x2F;repository&#x2F;releases&lt;&#x2F;url&gt; </span><br><span class="line">&lt;&#x2F;mirror&gt;  </span><br><span class="line">&lt;mirror&gt;     </span><br><span class="line"> &lt;id&gt;aliyun-snapshots&lt;&#x2F;id&gt;     </span><br><span class="line"> &lt;mirrorOf&gt;*&lt;&#x2F;mirrorOf&gt;     </span><br><span class="line"> &lt;name&gt;aliyun snapshots&lt;&#x2F;name&gt;     </span><br><span class="line"> &lt;url&gt;https:&#x2F;&#x2F;maven.aliyun.com&#x2F;repository&#x2F;snapshots&lt;&#x2F;url&gt; </span><br><span class="line">&lt;&#x2F;mirror&gt;    </span><br><span class="line">&lt;mirror&gt;     </span><br><span class="line"> &lt;id&gt;aliyun-grails-core&lt;&#x2F;id&gt;     </span><br><span class="line"> &lt;mirrorOf&gt;*&lt;&#x2F;mirrorOf&gt;     </span><br><span class="line"> &lt;name&gt;aliyun grails-core&lt;&#x2F;name&gt;     </span><br><span class="line"> &lt;url&gt;https:&#x2F;&#x2F;maven.aliyun.com&#x2F;repository&#x2F;grails-core&lt;&#x2F;url&gt; </span><br><span class="line">&lt;&#x2F;mirror&gt;  </span><br><span class="line">&lt;mirror&gt;     </span><br><span class="line"> &lt;id&gt;aliyun-mapr-public&lt;&#x2F;id&gt;     </span><br><span class="line"> &lt;mirrorOf&gt;*&lt;&#x2F;mirrorOf&gt;     </span><br><span class="line"> &lt;name&gt;aliyun mapr-public&lt;&#x2F;name&gt;     </span><br><span class="line"> &lt;url&gt;https:&#x2F;&#x2F;maven.aliyun.com&#x2F;repository&#x2F;mapr-public&lt;&#x2F;url&gt; </span><br><span class="line">&lt;&#x2F;mirror&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>转载<a href="https://segmentfault.com/a/1190000018147680" target="_blank" rel="noopener">https://segmentfault.com/a/1190000018147680</a></p>
]]></content>
      <tags>
        <tag>config</tag>
      </tags>
  </entry>
  <entry>
    <title>python中使用networkx画图</title>
    <url>/2020/08/20/python%E4%B8%AD%E4%BD%BF%E7%94%A8networkx%E7%94%BB%E5%9B%BE/</url>
    <content><![CDATA[<h2 id="总述"><a href="#总述" class="headerlink" title="总述"></a>总述</h2><p>今天被问了一个问题：如何把复杂的调用树可视化？</p>
<p>首先，这个问题可以被归结为：如何实现有向图的可视化。</p>
<p>当然，答案有很多种。可选的简单地解决方案可能是<a href="http://bookshadow.com/weblog/2016/11/22/echarts-directed-graph-visualization/" target="_blank" rel="noopener">基于echarts的在线的生成工具</a> [1]，或是<a href="https://antv.vision/en" target="_blank" rel="noopener">Ant V</a> [2]此类专用于画图的框架。本文主要介绍使用python中的networkx宏包作图。</p>
<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>python 2.7.17: 依赖库为matplotlib, networkx</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install matplotlib</span><br><span class="line">pip install networkx</span><br></pre></td></tr></table></figure>

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import networkx as nx</span><br><span class="line"></span><br><span class="line">G&#x3D;nx.DiGraph()</span><br><span class="line">list&#x3D;[(1,2),(1,3),(2,4),(&quot;source&quot;,&quot;end&quot;)]</span><br><span class="line">G.add_edges_from(list)</span><br><span class="line">nx.draw(G,with_labels&#x3D;True)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p>具体的nerworkx用法参见<a href="https://www.cnblogs.com/ljhdo/p/10662902.html" target="_blank" rel="noopener">已有博客</a> [3]或者<a href="https://networkx.github.io/documentation/stable/tutorial.html" target="_blank" rel="noopener">networkx官方文档</a> [4]，此处不再赘述。</p>
<p>值得一提的是，虽然python编码相对方便，但是画图的速度远不及基于JavaScript的各种框架。<code>nx.draw(G,with_labels=True)</code>这一行的执行速度非常慢，即使图中只有不超过10个节点也花了近半分钟进行生成。如果需要实时性高的生成，建议使用前文中的[1][2]或类似框架。</p>
<p><img src="/image/networkx.png" alt="效果图"></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] 利用echarts实现有向图可视化,<br><a href="http://bookshadow.com/weblog/2016/11/22/echarts-directed-graph-visualization/" target="_blank" rel="noopener">http://bookshadow.com/weblog/2016/11/22/echarts-directed-graph-visualization/</a><br>[2] AntV, <a href="https://antv.vision/en" target="_blank" rel="noopener">https://antv.vision/en</a><br>[3] networkx, <a href="https://www.cnblogs.com/ljhdo/p/10662902.html" target="_blank" rel="noopener">https://www.cnblogs.com/ljhdo/p/10662902.html</a><br>[4] networkx tutorial,<br><a href="https://networkx.github.io/documentation/stable/tutorial.html" target="_blank" rel="noopener">https://networkx.github.io/documentation/stable/tutorial.html</a></p>
]]></content>
      <tags>
        <tag>coding</tag>
      </tags>
  </entry>
  <entry>
    <title>基于maven的test-repo发生build-failure的解决方案</title>
    <url>/2020/08/05/%E5%9F%BA%E4%BA%8Emaven%E7%9A%84test-repo%E5%8F%91%E7%94%9Fbuild-failure%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h2 id="场景描述"><a href="#场景描述" class="headerlink" title="场景描述"></a>场景描述</h2><p>因实验需要，收集了一些Maven project在Ubuntu 16.04 LTS上进行mvn test/mvn compile等操作。有时会发生BUILD FAILURES。本文描述几个详细的案例及解决方案，供以后遇到类似情况参考。</p>
<h2 id="HikariCP"><a href="#HikariCP" class="headerlink" title="HikariCP"></a>HikariCP</h2><p>project地址：<a href="https://github.com/brettwooldridge/HikariCP.git" target="_blank" rel="noopener">https://github.com/brettwooldridge/HikariCP.git</a><br>表现：某个test异常卡顿（OSGI这个test），出现HTTPS 501问题，然后该test fail导致BUILD FAILURES。<br>分析：查找发现HTTPS 501的原因是默认没有使用https的central源，在2020年1月后强制使用https，否则就会报501错误。在更换maven源之后仍然没有解决这个问题。<br>解决方案：在pom.xml的surefire configuration里配置exclude该test，问题解决（基本不影响执行时间）。</p>
<h2 id="log4j"><a href="#log4j" class="headerlink" title="log4j"></a>log4j</h2><p>project地址：<a href="https://github.com/apache/log4j.git" target="_blank" rel="noopener">https://github.com/apache/log4j.git</a><br>表现：使用python脚本os.system(“mvn test &gt;&gt; output.txt”)<br>分析：log4j可能在测试中使用了某些输入输出流，与脚本中的流冲突导致fail。<br>解决方案：尝试手动mvn test，问题解决。</p>
<h2 id="java-apns"><a href="#java-apns" class="headerlink" title="java-apns"></a>java-apns</h2><p>project地址：<a href="https://github.com/notnoop/java-apns.git" target="_blank" rel="noopener">https://github.com/notnoop/java-apns.git</a><br>表现：integration test中的FeedbackTest出现大量Exception，然后build流程卡顿不动。具体见<a href="https://github.com/notnoop/java-apns/issues/370。" target="_blank" rel="noopener">https://github.com/notnoop/java-apns/issues/370。</a><br>分析：尝试用类似于HikariCP的解决方案exclude FeedbackTest，然而其它integration test也出现error。把整个integration test都exclude后，剩余BUILD时间只有15秒左右，执行时间变化很大。<br>解决方案：目前未解决。<strong>TODO</strong></p>
<h2 id="OpenTripPlanner"><a href="#OpenTripPlanner" class="headerlink" title="OpenTripPlanner"></a>OpenTripPlanner</h2><p>project地址：<a href="https://github.com/opentripplanner/OpenTripPlanner.git" target="_blank" rel="noopener">https://github.com/opentripplanner/OpenTripPlanner.git</a><br>表现：使用alimaven源出现大量Could not resolve artifact，在compile阶段开始前即BUILD FAILURES。<br>分析：查找发现此类问题大概率是由网络问题导致。在把alimaven源还原成central源后，download速率变慢很多，但仍未解决could not resolve artifact。<br>解决方案：更改pom.xml的配置，原有pom中配置的源是硬编码的已经失效。更改一些依赖的版本号。</p>
]]></content>
      <tags>
        <tag>config</tag>
        <tag>coding</tag>
      </tags>
  </entry>
  <entry>
    <title>如何编写maven插件（重新发布）</title>
    <url>/2020/07/14/%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99maven%E6%8F%92%E4%BB%B6%EF%BC%88%E9%87%8D%E6%96%B0%E5%8F%91%E5%B8%83%EF%BC%89/</url>
    <content><![CDATA[<h2 id="总述"><a href="#总述" class="headerlink" title="总述"></a>总述</h2><p>maven作为热门的build system经常被各种Java project采用。有时我们会遇到需要编写自定义maven插件的需求。</p>
<p>以IDEA为例：首先选择从maven创建一个project，如果勾选create from achetype就会生成模板程序代码（这里以maven-achetype-mojo为例）。项目名称规范是${NAME}-maven-plugin，然后需要选择maven home directory，随后自动生成模板程序代码。</p>
<h2 id="对maven源的配置"><a href="#对maven源的配置" class="headerlink" title="对maven源的配置"></a>对maven源的配置</h2><p>值得一提的是，初次使用maven会自动下载大量依赖文件，就算有梯子，也可能非常慢。这时就需要在创建project之前先对<code>${maven_path}/conf/settings.xml</code>进行设置更换国内源。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 对源的配置：增加localRepository，配置mirror url</span><br><span class="line">&lt;localRepository&gt;$&#123;YOUR_MAVEN_REPO_PATH&#125;&lt;&#x2F;localRepository&gt;</span><br><span class="line">&lt;mirrors&gt;</span><br><span class="line">    &lt;mirror&gt;</span><br><span class="line">    	&lt;id&gt;alimaven&lt;&#x2F;id&gt;</span><br><span class="line">    	&lt;name&gt;aliyun maven&lt;&#x2F;name&gt;</span><br><span class="line">    	&lt;url&gt;http:&#x2F;&#x2F;maven.aliyun.com&#x2F;nexus&#x2F;content&#x2F;groups&#x2F;public&#x2F;&lt;&#x2F;url&gt;</span><br><span class="line">    	&lt;mirrorOf&gt;central&lt;&#x2F;mirrorOf&gt;    </span><br><span class="line">    &lt;&#x2F;mirror&gt;</span><br><span class="line">&lt;&#x2F;mirrors&gt;</span><br></pre></td></tr></table></figure>
<h2 id="正式开始写maven-project的代码"><a href="#正式开始写maven-project的代码" class="headerlink" title="正式开始写maven project的代码"></a>正式开始写maven project的代码</h2><h3 id="对模板程序pom-xml的修改"><a href="#对模板程序pom-xml的修改" class="headerlink" title="对模板程序pom.xml的修改"></a>对模板程序pom.xml的修改</h3><p>可以看出来maven模板程序的pom.xml配置已经非常老了（比如这个maven-plugin-api还是2.0），这里参考KIWI的一篇博客一通乱改。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">  xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;maven-v4_0_0.xsd&quot;&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line">  &lt;groupId&gt;$&#123;YOUR_GROUP_ID&#125;&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;$&#123;NAME&#125;-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;packaging&gt;maven-plugin&lt;&#x2F;packaging&gt;</span><br><span class="line">  &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;name&gt;$&#123;NAME&#125;-mavne-plugin Maven Mojo&lt;&#x2F;name&gt;</span><br><span class="line">  &lt;url&gt;http:&#x2F;&#x2F;maven.apache.org&lt;&#x2F;url&gt;</span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.apache.maven&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;maven-plugin-api&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;3.5.2&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.apache.maven.plugin-tools&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;maven-plugin-annotations&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;3.5.2&lt;&#x2F;version&gt;</span><br><span class="line">      &lt;scope&gt;provided&lt;&#x2F;scope&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;&#x2F;dependencies&gt;</span><br><span class="line">  &lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">      &lt;plugin&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;maven-plugin-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;3.5.2&lt;&#x2F;version&gt;</span><br><span class="line">      &lt;&#x2F;plugin&gt;</span><br><span class="line">    &lt;&#x2F;plugins&gt;</span><br><span class="line">  &lt;&#x2F;build&gt;</span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Mojo类的规则简要介绍"><a href="#Mojo类的规则简要介绍" class="headerlink" title="Mojo类的规则简要介绍"></a>Mojo类的规则简要介绍</h3><p>Mojo类必须继承AbstractMojo 并实现他的 execute 方法，而 execute 方法其实就是这个插件的入口类。简单介绍注解<code>@Mojo(name = $NAME)</code>，用于定义插件相关信息，以便于在pom.xml里通过<goal>$NAME</goal>的形式显示指定。@Execute()注解则能指定Mojo的执行时机，绑定phase或lifecycle等。</p>
<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>写完了代码，需要mvn clean install（把该插件打包并部署至本地仓库），其他本地maven项目就可以通过pom.xml使用该插件。想要他人也可以使用，需要使用mvn deploy命令。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">  &lt;plugins&gt;</span><br><span class="line">    &lt;plugin&gt;</span><br><span class="line">      &lt;groupId&gt;$&#123;YOUR_GROUP_ID&#125;&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;$&#123;NAME&#125;-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;plugin&gt;</span><br><span class="line">  &lt;&#x2F;plugins&gt;</span><br><span class="line">&lt;&#x2F;build&gt;</span><br></pre></td></tr></table></figure>

<p>增加依赖后，可以直接命令行<code>mvn ${NAME}:${GOAL} [args]</code>的方式调用；也绑定至lifecycle，通过mvn test等命令调用（也可以IDEA右上角maven集成插件手动点击）。</p>
]]></content>
      <tags>
        <tag>coding</tag>
      </tags>
  </entry>
  <entry>
    <title>论文笔记:3Sigma</title>
    <url>/2020/09/21/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0-3Sigma/</url>
    <content><![CDATA[<h2 id="Content"><a href="#Content" class="headerlink" title="Content"></a>Content</h2><h3 id="About"><a href="#About" class="headerlink" title="About"></a>About</h3><p>Distribution-based cluster scheduling for runtime uncertainty</p>
<h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Cluster needs accurate running prediction but recent point-estimation based prediction model can lead to 8-17% error which may cause misleading in decision making.<br>  -&gt; recent work uses heuristics or other random methods to eliminates misleading caused by errors in time prediction (治标不治本)<br>  -&gt; Datacenter resources are increasingly heterogeneous, and some jobs behave differently (e.g., complete faster) depend ing upon which machine(s) they are assigned to.<br>  -&gt; heavy-tailed jobs, jobs with deadlines</p>
<h3 id="Interesting"><a href="#Interesting" class="headerlink" title="Interesting"></a>Interesting</h3><ol>
<li>集群上居然没有完善的对runtime历史数据的处理方法！</li>
<li>“Runtime knowledge” 非常重要</li>
</ol>
<h3 id="New"><a href="#New" class="headerlink" title="New"></a>New</h3><ol>
<li>Distribution-based data processing for runtime uncertainty -&gt; 不再仅仅使用点估计(history取平均值), 而是采用(a) average, (b) median, (c) rolling (exponentially weighted decay with<br>α = 0.6), (d) average of X recent job runtimes. 然后选取其中最低的normalized mean absolute error (NMAE)的方案</li>
</ol>
<h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><ol>
<li>针对子问题1，文中采用了distributioned-based history data processing for runtime uncertainty。在cluster环境下可能更加有效，但是其本质还是一个involve更多信息的heuristics(因为集群规模更大), 在task性质短时间内变化较大的情况下, 可能continuing learning based model表现会更好 (New中第一点也考虑了指数衰减的办法来保证数据时效性)</li>
<li>针对子问题2，文中没有明确指出如何针对其异构性解决问题，OSDI’20在Microsoft集群上有一篇针对异构性的解决方案</li>
<li>针对子问题3，heavy-tailed job会明显影响SLO(某种意义上影响QoS，可以说成是优化makespan), deadlines也会影响QoS(可以说是embedded environment下的time predictability)</li>
</ol>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] 3Sigma: Distribution-based cluster scheduling for runtime uncertainty, <a href="https://www.pdl.cmu.edu/PDL-FTP/CloudComputing/eurosys18-final49.pdf" target="_blank" rel="noopener">https://www.pdl.cmu.edu/PDL-FTP/CloudComputing/eurosys18-final49.pdf</a></p>
]]></content>
      <tags>
        <tag>reading notes</tag>
        <tag>EuroSys</tag>
      </tags>
  </entry>
  <entry>
    <title>论文笔记:AnDrone</title>
    <url>/2020/09/08/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0-AnDrone/</url>
    <content><![CDATA[<h2 id="Content"><a href="#Content" class="headerlink" title="Content"></a>Content</h2><h3 id="About"><a href="#About" class="headerlink" title="About"></a>About</h3><p>A drone-as-a-service solution -&gt; make drone access in the cloud</p>
<h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>monotask-&gt;利用率低, restriction较多, 学习成本高：third=party access利用算力或者做其他task</p>
<h3 id="Interesting"><a href="#Interesting" class="headerlink" title="Interesting"></a>Interesting</h3><ol>
<li>Intuition: virtual drones on physical drone</li>
<li>lightweight container (docker?) to implement virtualization; 使用Android System的策略+proxy-based control去控制real-time linux -&gt; task封装至container，部分授权+阻止与physical device的直接交互（飞行控制组件不给第三方授权geofenced，只在特定时刻授权access系统）</li>
<li>bill: based on energy consumption</li>
</ol>
<h3 id="New"><a href="#New" class="headerlink" title="New"></a>New</h3><ol>
<li>Contribution: Androne prototype -&gt; runtime performance overhead &lt; 1.5%, 几乎可忽略的energy usage, low-latency performance, meet real-time requirement, virtual drones</li>
</ol>
<h3 id="Neat"><a href="#Neat" class="headerlink" title="Neat"></a>Neat</h3><h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><ol>
<li>waypoint: 一些任务只有在此处才能够access系统，具有比continuous task更高的优先级</li>
</ol>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] Androne: Virtual drone computing in the cloud, <a href="https://dl.acm.org/doi/abs/10.1145/3302424.3303969" target="_blank" rel="noopener">https://dl.acm.org/doi/abs/10.1145/3302424.3303969</a></p>
]]></content>
      <tags>
        <tag>reading notes</tag>
        <tag>Eurosys</tag>
      </tags>
  </entry>
  <entry>
    <title>论文笔记:Heterogeneity-AwareClusterSchedulingPoliciesforDeepLearningWorkloads</title>
    <url>/2020/09/08/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0-Heterogeneity-AwareClusterSchedulingPoliciesforDeepLearningWorkloads/</url>
    <content><![CDATA[<h2 id="Content"><a href="#Content" class="headerlink" title="Content"></a>Content</h2><h3 id="About"><a href="#About" class="headerlink" title="About"></a>About</h3><p>A heterogeneity-aware cluster scheudling solution for DNN workloads</p>
<h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ol>
<li>[主要问题]现有的scheduler很多没有考虑heterogeneity: Performance Heterogeneity, Generality Across Policies, Colocation and Placement Optimizations.</li>
</ol>
<p>(1) Performance Heterogeneity: 复杂的DNN tasks需要在不同种类processor上执行; 并非越贵的processor越好, 对不同任务的dollar-normalized结果并不和价格正相关<br><i>“Existing schedulers like Gandiva, Tiresias, and Themis do not consider the heterogeneous performance behavior across accelerators.” </i><br>(2) Generality Across Policies: 已有的scheduler与scheduling mechanism紧耦合; 且大部分难以支持复杂的scheduling policy<br>(3) Colocation and Placement Optimizations: 全局调度目标要显示考虑这两项</p>
<ol start="2">
<li>现有的scheduler可能导致starvation: 某些task长时间排队得不到执行</li>
</ol>
<h3 id="Interesting"><a href="#Interesting" class="headerlink" title="Interesting"></a>Interesting</h3><ol>
<li>Gavel’s key observation是scheduling policy都可以表达为目标是工作完成率的优化问题, 整篇大部分都在围绕一些经典的scheudling goal如何用优化问题来表示</li>
</ol>
<h3 id="New"><a href="#New" class="headerlink" title="New"></a>New</h3><ol>
<li>设计scheduler时考虑了heterogeneity</li>
</ol>
<h3 id="Neat"><a href="#Neat" class="headerlink" title="Neat"></a>Neat</h3><ol>
<li>为了解决Problem 2设计了round-based mechanism, 理论上降低了发生starvation的可能性</li>
<li>round-based mechanism与scheduling policy解除了耦合, 能够更简单地integrate sophisticated scheduling policy</li>
</ol>
<h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><ol>
<li>有个用法heterogeneity-aware/heterogeneity-agnostic, 学习了: 可以用xxx-aware/xxx-agnostic来描述自己有的一些点和概括别人没有考虑到这些点。</li>
<li>space sharing这一块里面, greedy algorithm容易陷入局部最优。因为heterogeneity, <i>“different pairs of DNN applications in practice have vastly different performance when colocated together”</i></li>
</ol>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] Heterogeneity-Aware Cluster Scheduling Policies for Deep Learning Workloads, <a href="https://arxiv.org/pdf/2008.09213.pdf" target="_blank" rel="noopener">https://arxiv.org/pdf/2008.09213.pdf</a></p>
]]></content>
      <tags>
        <tag>reading notes</tag>
        <tag>arXiv</tag>
      </tags>
  </entry>
  <entry>
    <title>论文笔记:Karaoke</title>
    <url>/2020/08/26/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0-Karaoke/</url>
    <content><![CDATA[<h2 id="Content"><a href="#Content" class="headerlink" title="Content"></a>Content</h2><h3 id="About"><a href="#About" class="headerlink" title="About"></a>About</h3><p>A low-latency metadata-private communication solutions to distributed private messaging.</p>
<h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Performance problems:</p>
<ol>
<li><i>Differential privacy re-quires continuously adding noise messages, which leadsto high overheads.</i> -&gt; solution: optimistic indistinguishability 我认为此方案牺牲了一部分安全性来大幅度降低overhead，但是有补救方案（可以准确检测是否发生了信息泄露）</li>
<li><i>Generating sufficient noise in a distributed system wheresome nodes may be malicious.</i> -&gt; solution: efficient noise verification</li>
</ol>
<h3 id="Interesting"><a href="#Interesting" class="headerlink" title="Interesting"></a>Interesting</h3><ol>
<li>Solve latency problem for distributed private messaging.</li>
<li>Evaluation is perfect. The latency in the paper is 10x improvement than previous work.</li>
<li>Private analysis of the Karaoke’s design </li>
</ol>
<h3 id="New"><a href="#New" class="headerlink" title="New"></a>New</h3><ol>
<li>…（背景知识不了解，没看出来）</li>
</ol>
<h3 id="Neat"><a href="#Neat" class="headerlink" title="Neat"></a>Neat</h3><ol>
<li>…（背景知识不了解，没看出来）</li>
</ol>
<h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><ol>
<li>Evaluation的结果很全面且特别强</li>
<li><i>As a result, achieving privacy re-quires the use of expensive zero-knowledge proofs (e.g.,verifiable  shuffles)  to  ensure  that  an  adversary  cannotdrop messages</i>解释了传统解决problem 2的方案的弊端-&gt;会导致明显的CPU overhead</li>
<li>略读感觉更偏向于安全方向</li>
</ol>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] Karaoke, <a href="https://www.usenix.org/system/files/osdi18-lazar.pdf" target="_blank" rel="noopener">https://www.usenix.org/system/files/osdi18-lazar.pdf</a></p>
]]></content>
      <tags>
        <tag>reading notes</tag>
        <tag>OSDI</tag>
      </tags>
  </entry>
  <entry>
    <title>论文笔记:Medea</title>
    <url>/2020/09/15/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0-Medea/</url>
    <content><![CDATA[<h2 id="Content"><a href="#Content" class="headerlink" title="Content"></a>Content</h2><h3 id="About"><a href="#About" class="headerlink" title="About"></a>About</h3><p>Scheduling of long running application in shared production clusters.</p>
<h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Contrained scheduling optimization. (long running applications, in cluster)</p>
<h3 id="Interesting"><a href="#Interesting" class="headerlink" title="Interesting"></a>Interesting</h3><ol>
<li>文中对一系列workload作定义为long running applications(LRA): streaming systems, interactive data-intensive applications, latency-sensitive applications, machine learning frameworks(DNN workloads) -&gt; 区别于传统的task-based applications</li>
<li>Two-scheduler design:思路是区分LRA和task-based applications，LRA采用integer linear program(ILP)去当作online optimization problem来解决(ILP要太长时间情形下就会采用heuristic-based scheduling); task-based applications采用传统的task-based scheduler。全局优化目标是minimize constraint violations, miminize resource fragmentation, balance node load, minimize number of machines used。<br>“Using an optimization-based algorithm for high-quality placement of LRAs with constraints, and a traditional scheduler for placing task-based jobs with low scheduling latency.”</li>
<li></li>
</ol>
<h3 id="New"><a href="#New" class="headerlink" title="New"></a>New</h3><ol>
<li>xxx</li>
</ol>
<h3 id="Neat"><a href="#Neat" class="headerlink" title="Neat"></a>Neat</h3><ol>
<li>考虑了很多现实场景下存在的问题，比如unavaible machines</li>
</ol>
<h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><ol>
<li>Microsoft发的，选了6个cluster做case study，在400+ node的集群上做evaluation</li>
<li>Evaluation发现纯ILP的方案latency很大(远大于现有解决方案J-KUBE)</li>
</ol>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] MEDEA: Scheduling of Long Running Application in Shared Production Clusters, <a href="https://www.doc.ic.ac.uk/~pg1712/static/papers/MEDEA_EuroSys18.pdf" target="_blank" rel="noopener">https://www.doc.ic.ac.uk/~pg1712/static/papers/MEDEA_EuroSys18.pdf</a></p>
]]></content>
      <tags>
        <tag>reading notes</tag>
        <tag>Eurosys</tag>
      </tags>
  </entry>
  <entry>
    <title>论文笔记:NeuOS</title>
    <url>/2020/08/18/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0-NeuOS/</url>
    <content><![CDATA[<h2 id="Content"><a href="#Content" class="headerlink" title="Content"></a>Content</h2><h3 id="About"><a href="#About" class="headerlink" title="About"></a>About</h3><p>DNN-driven autonomous Systems optimization (low latency, balance, high accuary)</p>
<h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>How to optimize resource-constrainted (stringent space, weight, power constraints) DNNs application in software level (application-level + system-level)</p>
<h3 id="Interesting"><a href="#Interesting" class="headerlink" title="Interesting"></a>Interesting</h3><p>Multi device testing scenarios + multi dnn testing case </p>
<h3 id="New"><a href="#New" class="headerlink" title="New"></a>New</h3><p>Address the challenge of balancing energy at system level and accuracy at application level for DNNs</p>
<h3 id="Neat"><a href="#Neat" class="headerlink" title="Neat"></a>Neat</h3><p>Appliction-level accuracy control by lowrank decomposition + system-level latency control by DVFS</p>
<h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><ol>
<li>Method不一定很fancy，但是evaluation效果很好且很全面</li>
<li><i>“The stringent space, weight, and power constraints seen in such systems impose a major impediment for practical and safe implementation of DNNs, because they have to be latency predictable while ensuring minimum energy consumption and maximum accuracy.”</i> DNN在embedded system的autonomous driving场景下要求高实时性和可靠性。</li>
</ol>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] <a href="https://www.usenix.org/system/files/atc20-bateni.pdf" target="_blank" rel="noopener">NeuOS: A Latency-Predictable Multi-Dimensional Optimization Framework for DNN-driven Autonomous Systems</a></p>
]]></content>
      <tags>
        <tag>reading notes</tag>
        <tag>ATC</tag>
      </tags>
  </entry>
  <entry>
    <title>论文笔记:PRIMAL</title>
    <url>/2020/09/21/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0-PRIMAL/</url>
    <content><![CDATA[<h2 id="Content"><a href="#Content" class="headerlink" title="Content"></a>Content</h2><h3 id="About"><a href="#About" class="headerlink" title="About"></a>About</h3><p>Power Inference using Machine Learning</p>
<h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>传统方案下的power inference的overhead较大，对复杂model的power analysis要求很长时间的offline analysis</p>
<h3 id="Interesting"><a href="#Interesting" class="headerlink" title="Interesting"></a>Interesting</h3><ol>
<li>文中找出了overhead最大的传统方案下的模块，并且使用machine-learning based method进行替代，达到了up to 50x speed up的效果</li>
</ol>
<h3 id="New"><a href="#New" class="headerlink" title="New"></a>New</h3><ol>
<li>machine-learning based method</li>
</ol>
<h3 id="Neat"><a href="#Neat" class="headerlink" title="Neat"></a>Neat</h3><ol>
<li>文中做了对比实验，选用较简单的multi-layper perception (MLP)和更复杂的CNN; MLP能达到50x speed up但预测准确率偏低, CNN大约30x，准确率更高</li>
<li>和NVIDIA商用模型进行了比较，有一定实用可能性</li>
</ol>
<h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><ol>
<li>可以考虑在加速问题上采用machine-learning model</li>
</ol>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] PRIMAL: Power Inference using Machine Learning，<a href="https://research.nvidia.com/sites/default/files/pubs/2019-06_PRIMAL%3A-Power-Inference//24_1_Zhou_PRIMAL.pdf" target="_blank" rel="noopener">https://research.nvidia.com/sites/default/files/pubs/2019-06_PRIMAL%3A-Power-Inference//24_1_Zhou_PRIMAL.pdf</a></p>
]]></content>
      <tags>
        <tag>reading notes</tag>
        <tag>DAC</tag>
      </tags>
  </entry>
  <entry>
    <title>论文笔记:Per-ApplicationPowerDelivery</title>
    <url>/2020/09/08/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0-Per-ApplicationPowerDelivery/</url>
    <content><![CDATA[<h2 id="Content"><a href="#Content" class="headerlink" title="Content"></a>Content</h2><h3 id="About"><a href="#About" class="headerlink" title="About"></a>About</h3><p>在有power cap的情况下，对per application进行power distribute。</p>
<h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>如何不影响性能的情况下降低功耗 power/energy<br><i>we focus on the problem of differential power delivery: how can and should a system allocate different amounts of power to different applications to effect prioritization and isolation?</i> 系统应该如何为不同的应用程序分配不同数量的功率以实现优先级划分和隔离？</p>
<h3 id="Interesting"><a href="#Interesting" class="headerlink" title="Interesting"></a>Interesting</h3><ol>
<li>类似文章套路都会在Introduction位置做一个很简单有力的初步的motivate example</li>
</ol>
<h3 id="New"><a href="#New" class="headerlink" title="New"></a>New</h3><ol>
<li>server级别的power distribution较少，大多数都是在cluster做；本文把一些embedded system上的power constraint搬到了server上</li>
</ol>
<h3 id="Neat"><a href="#Neat" class="headerlink" title="Neat"></a>Neat</h3><ol>
<li>Evaluation强：有一个motivate example之后做了一个相对强的case study，然后由此引出policy design &amp; implementation</li>
</ol>
<h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><ol>
<li>已有的解决方案dynamic voltage and frequency scaling(DVFS), running average power limit(RAVL):<br>1.1 DVFS: 有global和individual(可能只有部分处理器支持)可选<br>1.2 RAVL: 把处理器分为若干部分，每个部分单独加power cap；可能会导致所有core被锁定至同一频率(“RAVL+global DVFS” -&gt; “all cores are throttled to the same frequecny”) -&gt; 出现priority和power不匹配的问题</li>
<li>Conclusion:<br>2.1 硬件水平上能够实现每个core的不同功率水平，但是policies are not yet available.<br>2.2 文中提出power shares, frequency shares, performance shares 三个基于priority的policy。目前frequency shares表现最稳定，效果最好。理论上power shares最容易实现，但是需要预先知道application对应需要多少能量(不一定applicable)</li>
<li>文中可以改进的地方:<br>3.1 文中target了1个RAVL可能会出现的bad case: 在power cap比较低的情况下，power distribution不合理导致高优先级任务无法获得足够资源执行，尤其在high-priority low-demand(HPLD)和low-priority high-demand(LPHD)情况下会出现bad case。<br>3.2 文中不考虑scheduler的问题(直接使用系统自定义的scheduler)，然而明确指出可以做power-aware scheduler而没有去做<br>3.3 文中没有考虑real-time policy的问题，假设全部任务是concurrently执行<br>3.4 文中没有考虑saturation的问题，即可能出现增加power也不会继续提升performance的情况(此现象在PredJoule中有提到并用Uncertainty来解决)。文中的policy在进行re-distribute时直接采用min-funding revocation policy，直接将saturated application从mix中移除再重新run distribute function<br>3.5 文中提出的power shares policy本质还是priority-based policy，可能会出现low-priority task的starvation，文中没有设计合适的解决方案应对这个问题</li>
</ol>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] Per-Application Power Delivery, <a href="https://dl.acm.org/doi/abs/10.1145/3302424.3303981" target="_blank" rel="noopener">https://dl.acm.org/doi/abs/10.1145/3302424.3303981</a></p>
]]></content>
      <tags>
        <tag>reading notes</tag>
        <tag>Eurosys</tag>
      </tags>
  </entry>
  <entry>
    <title>论文笔记:PredJoule</title>
    <url>/2020/09/14/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0-PredJoule/</url>
    <content><![CDATA[<h2 id="Content"><a href="#Content" class="headerlink" title="Content"></a>Content</h2><h3 id="About"><a href="#About" class="headerlink" title="About"></a>About</h3><p>Timing-predictable energy optimization framework for DNN workloads.</p>
<h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Timing-predictablity and energy should be considered in running DNN workloads.<br>DNN workloads needs to be provided timing predictablity while minimized energy.</p>
<h3 id="Interesting"><a href="#Interesting" class="headerlink" title="Interesting"></a>Interesting</h3><p>Motivation是DNN应当做细粒度的配置,而不是当黑盒;DVFS与performance不完全一致</p>
<ol>
<li>learning-based strategy: 基于历史记录去调优config</li>
<li>New的第一条对应motivation 1</li>
<li>引入不确定度：max(Norm(Power) / Norm(Latency))，在提升power的时候倾向选择不确定性低的，在降低power的时候倾向选择不确定性高的</li>
</ol>
<h3 id="New"><a href="#New" class="headerlink" title="New"></a>New</h3><ol>
<li>layer-based consideration -&gt; DNN的特点，可以分层去考虑；不同层级有不同的特性</li>
<li>learning-based strategy -&gt; 区别于已有的offline benchmarking 更加practical</li>
</ol>
<h3 id="Neat"><a href="#Neat" class="headerlink" title="Neat"></a>Neat</h3><ol>
<li>evaluation的diversity体现得很好：一个同类复现，一个最大化frequency策略，一个系统自带高performance策略，一个系统自带低energy策略</li>
<li>Evaluation的figure 9感觉特别强：原因应该是实现得好，避免了一些expensive file I/O + efficient reverse history</li>
</ol>
<h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><ol>
<li>没有做DVFS相关，文中把DVFS排除到design之外，strategy是随机选择的。</li>
<li>没有定量地分析不同layer的不确定性趋势（文中提到可能和data input size有关）</li>
<li>learning-based method可能依赖于一个较好的解, 收敛速度不是很快</li>
</ol>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] Predjoule, <a href="https://ieeexplore.ieee.org/document/8603196" target="_blank" rel="noopener">https://ieeexplore.ieee.org/document/8603196</a></p>
]]></content>
      <tags>
        <tag>reading notes</tag>
        <tag>RTSS</tag>
      </tags>
  </entry>
  <entry>
    <title>论文笔记:TimeGraph</title>
    <url>/2020/09/28/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0-TimeGraph/</url>
    <content><![CDATA[<h2 id="Content"><a href="#Content" class="headerlink" title="Content"></a>Content</h2><h3 id="About"><a href="#About" class="headerlink" title="About"></a>About</h3><p>GPU Scheduling and resource reservation for Real-Time Multi-Tasking Environments</p>
<h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Recent GPU scheudling policy behaves badly in real-time multi-tasking environments:<br>    1. Scheduler for CPU puts current highest-priority tasks into the waiting queue -&gt; low overhead, but cannot permit semantic correctness of priority (may cause priority inversion),things go worse in overloaded case.)<br>    2. No reservation works together with the scheduler on GPU side.</p>
<h3 id="Interesting"><a href="#Interesting" class="headerlink" title="Interesting"></a>Interesting</h3><ol>
<li>Scheduling and resource reservation in future user-interface</li>
<li>Real-time constraints and multi-tasking environments</li>
</ol>
<h3 id="New"><a href="#New" class="headerlink" title="New"></a>New</h3><ol>
<li>Propose 2 priority-based scheduling policies for GPU scheduling: Predictable-response-time (PRT), High-throughtput (HT)</li>
<li>Propose 2 resource reservation policies for GPU based on budget/replenishment(a widely used mechanism in real-time system): Posterior enforcemnet(PE), Apriori enforcement(AE) </li>
</ol>
<h3 id="Neat"><a href="#Neat" class="headerlink" title="Neat"></a>Neat</h3><ol>
<li>Event-based scheudling -&gt; much lower overhead than tick-based scheduling<br>PredJoule在layer boundry makes decisions也是event-based</li>
<li>reservations中PE的overhead小，但priority inversion概率更高; AE存在overhead更大的可能性，且predicted running time测不准的问题(文中是细粒度的scheudling)，且对于粗粒度的scheduling(layer-based scheduling)，runtime更加难以预测</li>
</ol>
<h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><ol>
<li>文中提到”protect import GPU workloads from performance interference”, performance interference可能的原因是priority inversion, overhead(context switch, scheduling本身消耗)。(可以尝试power profiling去验证，应该有现成的工具)</li>
<li>文中采用event-based scheduling(CPU要向GPU sumbit一次GPU command group称为一个event), 但对于layer-based这种采用event-based是否过于粗粒度?</li>
<li>文中不考虑preempt, 假定GPU commands都是non-preemptable (实际layer-based也没有考虑，考虑此项会使得context switch消耗增加且设计更加复杂)</li>
<li>budget/replenishment可能存在问题: 如果feed单个消耗很大的任务(E&gt;budget)，可能会导致该任务被block/starvation: 可以采取random/heuristic的办法使scheduler带有一定随机性，具有从bad case中自我恢复的能力; 另外是否预测准确也会影响reservation效果(文中假定了预测100%准确) -&gt; (3Sigma那篇提到集群上predicted runtime不准会大幅度影响scheduling效果问题)</li>
<li>future-work中提到”mapping application-level specifications, such as frame-rates into priority and reservation properties at OS level”，可能在设计DNN specific scheduler的priority可以考虑</li>
</ol>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] TimeGraph, <a href="http://www.usenix.org/events/atc11/tech/final_files/Kato.pdf" target="_blank" rel="noopener">http://www.usenix.org/events/atc11/tech/final_files/Kato.pdf</a></p>
]]></content>
      <tags>
        <tag>reading notes</tag>
        <tag>ATC</tag>
      </tags>
  </entry>
  <entry>
    <title>论文笔记:ZygOS</title>
    <url>/2020/08/26/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0-ZygOS/</url>
    <content><![CDATA[<h2 id="Content"><a href="#Content" class="headerlink" title="Content"></a>Content</h2><h3 id="About"><a href="#About" class="headerlink" title="About"></a>About</h3><p>The efficient scheduling on multicore systems of very fine-grain networked tasks (typical building lock of online data-intensive applications) -&gt; (can be also considered as in-memory services). To deliver high throughput for tail latency service-level objectives that are a small multiple of the task size.</p>
<h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><ol>
<li>场景：高并发，与面向用户的SLO(根据tail latency来定义)配合使用的应用程序。SLO通常伴随data-intensive call，相对的仅需要几微秒的user-execution time。<br>high concurrent, with user-facing SLO (defined in terms  of tail latency) applications. SLO of data service must consider long tail of the latency distributions of requests, meanwhile, individual task sizes often require only a handful of µs of user-level execution time. </li>
<li>如果仅使用conventional OS (i.e., typically Linux) -&gt; suffers high overheads for µs-scale tasks; more spcialized kernel-bypass approach improves throughput substantially (through sweeping simplifications such as separation of control from the dataplane execution, polling, run-to-completion, and synchronization-free, flow-consistent mapping of requests to cores).</li>
<li>简化设计导致了(a) the dataplane is not a work conserving scheduler; (b) the dataplane suffers from head-of-line blocking</li>
</ol>
<h3 id="Interesting"><a href="#Interesting" class="headerlink" title="Interesting"></a>Interesting</h3><ol>
<li>2012年就有这个对于problem 1理论上的解答(a) single-queue, multiple-processor models deliver lower tail latency than parallel single-queue, single-processor models (-&gt; 文中做了study去验证正确性) (b) FCFS delivers the best tail latency for low-dispersion tasks while processor sharing delivers superior results in high dispersion service time distributions</li>
<li>架构上分为3层: (a) a lower networking layer which runs in strict isolated on each core; (b) a middle shuffle layer which allows idle cores to aggressively steal pending events; (c) an upper execution layer which exposes a commutative API to applications for scalability. <strong>Shuffle layer eliminates head-of-line-blocking while also offering strong ordering semantics of events associated with the same connection.</strong></li>
</ol>
<h3 id="New"><a href="#New" class="headerlink" title="New"></a>New</h3><ol>
<li>To solve problem 2, this paper present ZygOS, a new approach to system software optimized for µs-scale, in-memory computing.</li>
</ol>
<h3 id="Neat"><a href="#Neat" class="headerlink" title="Neat"></a>Neat</h3><ol>
<li>Just enough queuing theory: (个人感觉比较像是networking里采用的窗口探测，正好赋予congestion windows = bandwidth 能够避免高重传率也能够最大化throughput)</li>
<li>System design: (a) designed for current-generation datacenter architectures; (b) build a robust, multi-core, work-conserving scheduler free of head-of-line blocking for event-driven apps; (c) provide clean, ordering semantics of task-stealing operations to multi-threaded apps when handling back-to-back events for the same socket; (d) <strong>minimally degrade</strong> the throughput of short tasks when compared with state-of-the-art, shared-nothing dataplanes. (这里paper直接自己提可能的弊端，并在设计中尽量削减这个问题的影响)</li>
<li>Intermediate buffering and IPIs are used to eliminate head-of-line blocking (-&gt;FCFS的一个典型弊端). 在system architecture design中体现为middle shuffle layer中的shuffle queue (a single-producer, multiple-consumer queue which contains the list of ready connections originating from a given core)可以做到atomically stealing tasks</li>
</ol>
<h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><ol>
<li>3个Microsoft-EPFL, Switzerland的工业界paper</li>
<li>Implementation和Evaluation非常强：真的造了个OS（不是prototype），而且效果不错。</li>
<li>可解释性强: paper里evaluation有明显效果还为效果提升做了解释，<i>“The speedup over Linux is explained by the use of many dataplane implementation principles in ZYGOS. The speedup over IX is explained by ZYGOS’swork-conservingscheduler,whichrebalancestasks to deliver consistently low tail latency nearly up to the point of saturation.”</i></li>
</ol>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] ZygOS, <a href="https://dl.acm.org/doi/pdf/10.1145/3132747.3132780" target="_blank" rel="noopener">https://dl.acm.org/doi/pdf/10.1145/3132747.3132780</a></p>
]]></content>
      <tags>
        <tag>reading notes</tag>
        <tag>SOSP</tag>
      </tags>
  </entry>
  <entry>
    <title>论文笔记:survey</title>
    <url>/2020/09/28/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0-survey/</url>
    <content><![CDATA[<h2 id="Content"><a href="#Content" class="headerlink" title="Content"></a>Content</h2><h3 id="About"><a href="#About" class="headerlink" title="About"></a>About</h3><p>A Comprehensive Survey on Energy-Efficient Power Management Techniques</p>
<h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Survey on how to achieve energy-efficient power manangement on different computing scenarios</p>
<h3 id="Interesting"><a href="#Interesting" class="headerlink" title="Interesting"></a>Interesting</h3><p>这是19年最新的相关领域survey，从中寻找一些领域内的线索</p>
<h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><ol>
<li>文中非常看好machine-learning based/deep-learning based method去做power management的前景, 并声称power management本质上是一个NP-hard问题，只能在较小的input情况下有限时间找最优解。(实际应用更多依赖DNN inference) “The study emphasizes that this research can be further extended along with machine learning  and deep learning. Such approaches can be benefificial in deriving optimal system confifigurations for hardware components, software applications, scheduling, computing, networking, databases, operating systems, and other management schemes. The performance of computer systems, their architectures, and power management operations can be carried out in a cost-effffective and eco-friendly manner for the betterment of green IT.”</li>
<li>“Subsequently, minimization of software energy consumption needs to be primarily considered” [2]</li>
<li>“A multilevel process control system (MLPCS) was proposed in (9) to select hardware features and hence, synthesis components for energy-effient processes.”<br>“In such cases, knowledge of the expected power consumption and/or performance range would be useful.” [3]</li>
<li>“A survey on GPU power conservation along with power modeling and profifiling methods was carried out in (12).” [4]</li>
<li>“In (14), authors explored the frequency scaling rules to build an energy-aware CPU.” [5]</li>
<li>“On the other hand, the impact of CPU pinning was studied on energy-efficiency and performance interference between a pair of colocated workloads in (15).” [6]</li>
<li>“It has also been identifified that difffferent software consumes a varying amount of power (21, 22).” [7] [8]</li>
<li>“Similarly, tool to estimate energy consumption (TEEC) was introduced in (27) to support green software development; it was developed to assist for improvement in the source code. TEEC measured the power consumption by CPU, memory, and disk while executing an application at runtime.” [9] 此处提供了application-level power estimation的工具</li>
<li>“Maintaining energy proportionality is necessary to control over-heating issues. An intelligent infrastructure, BML was proposed in (18) which was devised with heterogeneous architectures and a scheduling framework to utilize energy segmentation.” [10]<br>“As compared to ARM big.LITTLE multi-core processor architecture (33), which demonstrated relative heterogeneity in terms of computing power and power consumption, BML infrastructure was developed with heterogeneity within its architecture itself.” [11]</li>
<li>“Using dynamic slack and system utilization concepts, a hybrid approach with Q-learning and different DVFS technologies was proposed in (34).” [12]</li>
<li>“The scheduling policy and application allocation to appropriate processing core can determine the effectiveness of a heterogeneous architecture (36); such heterogeneous multi-core offer energy-efficient computing. A composite cores architecture (CCA) was used to predict a favorable core confifiguration using machine learning for a multi threaded application” [13]</li>
<li>“Granular profifiling of HPC applications was proposed in (39) using Running Average Power Limit and adaptive power management systems. The article aimed at optimizing energy utilization and providing optimal power budget (OPB) before scheduling decision.” [14] 可能能够从这篇中参考一些reseravation的思路</li>
</ol>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] A Comprehensive Survey on Energy-Efficient Power Management Techniques, <a href="https://www.sciencedirect.com/science/article/pii/S1877050920308991" target="_blank" rel="noopener">https://www.sciencedirect.com/science/article/pii/S1877050920308991</a><br>[2] What do programmers know about software energy consumption?, <a href="https://sail.cs.queensu.ca/Downloads/IEEESoftware2016_WhatDoProgrammersKnowAboutSoftwareEnergyConsumption.pdf" target="_blank" rel="noopener">https://sail.cs.queensu.ca/Downloads/IEEESoftware2016_WhatDoProgrammersKnowAboutSoftwareEnergyConsumption.pdf</a><br>[3] Selection of hardware features and synthesis of multilevel control system components of energy efficiency of production processes, <a href="https://ieeexplore.ieee.org/document/8365730" target="_blank" rel="noopener">https://ieeexplore.ieee.org/document/8365730</a><br>[4] Understanding gpu power: A survey of profiling, modeling, and simulation methods, <a href="https://www.osti.gov/pages/servlets/purl/1326472" target="_blank" rel="noopener">https://www.osti.gov/pages/servlets/purl/1326472</a><br>[5] Energy-efficient CPU frequency control for the Linux system, <a href="https://www.academia.edu/11870430/Energy_efficient_CPU_frequency_control_for_the_Linux_system" target="_blank" rel="noopener">https://www.academia.edu/11870430/Energy_efficient_CPU_frequency_control_for_the_Linux_system</a><br>[6] Analyzing the impact of cpu pinning and partial cpu loads on performance and energy efficiency, <a href="https://ieeexplore.ieee.org/document/7152466" target="_blank" rel="noopener">https://ieeexplore.ieee.org/document/7152466</a><br>[7] Towards Green IT Organisations: A Framework for Energy Consumption and Reduction, …<br>[8] Using complete machine simulation for software power estimation: the SoftWatt approach, <a href="https://ieeexplore.ieee.org/document/995705" target="_blank" rel="noopener">https://ieeexplore.ieee.org/document/995705</a><br>[9] The Impact of Source Code in Software on Power Consumption, <a href="https://hal.archives-ouvertes.fr/hal-01496266/document" target="_blank" rel="noopener">https://hal.archives-ouvertes.fr/hal-01496266/document</a><br>[10] Big, Medium, Little: Reaching Energy Proportionality with Heterogeneous Computing Scheduler, <a href="https://pdfs.semanticscholar.org/8daf/2637eb28d69c20f96f899353c7f6354b8eb9.pdf" target="_blank" rel="noopener">https://pdfs.semanticscholar.org/8daf/2637eb28d69c20f96f899353c7f6354b8eb9.pdf</a><br>[11] big.LITTLE Technology: The Future of Mobile Making very high performance available in a mobile envelope without sacrificing energy efficiency. <a href="https://img.hexus.net/v2/press_releases/arm/big.LITTLE.Whitepaper.pdf" target="_blank" rel="noopener">https://img.hexus.net/v2/press_releases/arm/big.LITTLE.Whitepaper.pdf</a><br>[12] Hybrid DVFS Scheduling for Real-Time Systems Based on Reinforcement Learning, <a href="https://ieeexplore.ieee.org/document/7163527" target="_blank" rel="noopener">https://ieeexplore.ieee.org/document/7163527</a><br>[13] Machine Learning-Based Approaches for Energy-Efficiency Prediction and Scheduling in Composite Cores Architectures, <a href="https://ieeexplore.ieee.org/document/8119201" target="_blank" rel="noopener">https://ieeexplore.ieee.org/document/8119201</a><br>[14] Adaptive Power Management for HPC applications, <a href="https://ieeexplore.ieee.org/document/7508065" target="_blank" rel="noopener">https://ieeexplore.ieee.org/document/7508065</a></p>
]]></content>
      <tags>
        <tag>reading notes</tag>
      </tags>
  </entry>
</search>
